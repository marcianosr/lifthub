## ## ## ## ## ## ## ## ## ## ## ## ## ##
##
## Schema for graphql yoga, contains queries and mutations. (NOT for the back-end)
## This should be the public API for the front-end. Out interface for Java/Script.
## This has a limited set of data to return
##
## ## ## ## ## ## ## ## ## ## ## ## ## ##

# import... as a comment ðŸ˜…
# import * from "../generated/schema.graphql"

type User {
  id: ID!
  name: String!
  email: String!
  logs: [Log]!
  # fetch the log id
}

type Log {
  id: ID!
  name: String!
  date: String!
  excersise: [Excersise]!
}

type Excersise {
  id: ID!
  name: String!
  sets: [Set]!
}

type Set {
  id: ID!
  weight: Int!
  reps: Int!
}

# Root queries
type Query {
  logs(where: LogWhereInput): [Log]!
  log(id: ID!): Log
  # Put the id fromn the log in here
  excersises: [Excersise]!
  user(where: UserWhereInput): User!
}

# TRoot mutations
type Mutation {
  # createLog(data: LogInput): Log! # "Log" comes from the generated graphql file
  createLog(name: String): Log!
  # createProgram(data: ProgramInput): Program!
  # createSets(data: SetsInput): Sets!
}

# Example purposes
# type Pokemon {
#   name: String! # "!" means required
#   types: [String]!
#   level: Int!
# }

# type Query {
#   # Return an array of pokemon and is always required.
#   # Passing the exclamation mark inside the array, means tgat we cannot return null as return value
#   # pokemon: [Pokemon]!
#   log: Log
# }
