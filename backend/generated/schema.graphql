type AggregateExcersises {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregateSet {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Excersises {
  id: ID!
  name: String!
  sets(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set!]
}

type ExcersisesConnection {
  pageInfo: PageInfo!
  edges: [ExcersisesEdge]!
  aggregate: AggregateExcersises!
}

input ExcersisesCreateInput {
  id: ID
  name: String!
  sets: SetCreateManyInput
}

input ExcersisesCreateManyInput {
  create: [ExcersisesCreateInput!]
  connect: [ExcersisesWhereUniqueInput!]
}

type ExcersisesEdge {
  node: Excersises!
  cursor: String!
}

enum ExcersisesOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ExcersisesPreviousValues {
  id: ID!
  name: String!
}

input ExcersisesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ExcersisesScalarWhereInput!]
  OR: [ExcersisesScalarWhereInput!]
  NOT: [ExcersisesScalarWhereInput!]
}

type ExcersisesSubscriptionPayload {
  mutation: MutationType!
  node: Excersises
  updatedFields: [String!]
  previousValues: ExcersisesPreviousValues
}

input ExcersisesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExcersisesWhereInput
  AND: [ExcersisesSubscriptionWhereInput!]
  OR: [ExcersisesSubscriptionWhereInput!]
  NOT: [ExcersisesSubscriptionWhereInput!]
}

input ExcersisesUpdateDataInput {
  name: String
  sets: SetUpdateManyInput
}

input ExcersisesUpdateInput {
  name: String
  sets: SetUpdateManyInput
}

input ExcersisesUpdateManyDataInput {
  name: String
}

input ExcersisesUpdateManyInput {
  create: [ExcersisesCreateInput!]
  update: [ExcersisesUpdateWithWhereUniqueNestedInput!]
  upsert: [ExcersisesUpsertWithWhereUniqueNestedInput!]
  delete: [ExcersisesWhereUniqueInput!]
  connect: [ExcersisesWhereUniqueInput!]
  set: [ExcersisesWhereUniqueInput!]
  disconnect: [ExcersisesWhereUniqueInput!]
  deleteMany: [ExcersisesScalarWhereInput!]
  updateMany: [ExcersisesUpdateManyWithWhereNestedInput!]
}

input ExcersisesUpdateManyMutationInput {
  name: String
}

input ExcersisesUpdateManyWithWhereNestedInput {
  where: ExcersisesScalarWhereInput!
  data: ExcersisesUpdateManyDataInput!
}

input ExcersisesUpdateWithWhereUniqueNestedInput {
  where: ExcersisesWhereUniqueInput!
  data: ExcersisesUpdateDataInput!
}

input ExcersisesUpsertWithWhereUniqueNestedInput {
  where: ExcersisesWhereUniqueInput!
  update: ExcersisesUpdateDataInput!
  create: ExcersisesCreateInput!
}

input ExcersisesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sets_every: SetWhereInput
  sets_some: SetWhereInput
  sets_none: SetWhereInput
  AND: [ExcersisesWhereInput!]
  OR: [ExcersisesWhereInput!]
  NOT: [ExcersisesWhereInput!]
}

input ExcersisesWhereUniqueInput {
  id: ID
}

type Log {
  id: ID!
  name: String!
  date: DateTime!
  excersises(where: ExcersisesWhereInput, orderBy: ExcersisesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Excersises!]
}

type LogConnection {
  pageInfo: PageInfo!
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  id: ID
  name: String!
  date: DateTime!
  excersises: ExcersisesCreateManyInput
}

input LogCreateManyInput {
  create: [LogCreateInput!]
  connect: [LogWhereUniqueInput!]
}

type LogEdge {
  node: Log!
  cursor: String!
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  date_ASC
  date_DESC
}

type LogPreviousValues {
  id: ID!
  name: String!
  date: DateTime!
}

input LogScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [LogScalarWhereInput!]
  OR: [LogScalarWhereInput!]
  NOT: [LogScalarWhereInput!]
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogWhereInput
  AND: [LogSubscriptionWhereInput!]
  OR: [LogSubscriptionWhereInput!]
  NOT: [LogSubscriptionWhereInput!]
}

input LogUpdateDataInput {
  name: String
  date: DateTime
  excersises: ExcersisesUpdateManyInput
}

input LogUpdateInput {
  name: String
  date: DateTime
  excersises: ExcersisesUpdateManyInput
}

input LogUpdateManyDataInput {
  name: String
  date: DateTime
}

input LogUpdateManyInput {
  create: [LogCreateInput!]
  update: [LogUpdateWithWhereUniqueNestedInput!]
  upsert: [LogUpsertWithWhereUniqueNestedInput!]
  delete: [LogWhereUniqueInput!]
  connect: [LogWhereUniqueInput!]
  set: [LogWhereUniqueInput!]
  disconnect: [LogWhereUniqueInput!]
  deleteMany: [LogScalarWhereInput!]
  updateMany: [LogUpdateManyWithWhereNestedInput!]
}

input LogUpdateManyMutationInput {
  name: String
  date: DateTime
}

input LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput!
  data: LogUpdateManyDataInput!
}

input LogUpdateWithWhereUniqueNestedInput {
  where: LogWhereUniqueInput!
  data: LogUpdateDataInput!
}

input LogUpsertWithWhereUniqueNestedInput {
  where: LogWhereUniqueInput!
  update: LogUpdateDataInput!
  create: LogCreateInput!
}

input LogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  excersises_every: ExcersisesWhereInput
  excersises_some: ExcersisesWhereInput
  excersises_none: ExcersisesWhereInput
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
}

input LogWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createExcersises(data: ExcersisesCreateInput!): Excersises!
  updateExcersises(data: ExcersisesUpdateInput!, where: ExcersisesWhereUniqueInput!): Excersises
  updateManyExcersiseses(data: ExcersisesUpdateManyMutationInput!, where: ExcersisesWhereInput): BatchPayload!
  upsertExcersises(where: ExcersisesWhereUniqueInput!, create: ExcersisesCreateInput!, update: ExcersisesUpdateInput!): Excersises!
  deleteExcersises(where: ExcersisesWhereUniqueInput!): Excersises
  deleteManyExcersiseses(where: ExcersisesWhereInput): BatchPayload!
  createLog(data: LogCreateInput!): Log!
  updateLog(data: LogUpdateInput!, where: LogWhereUniqueInput!): Log
  updateManyLogs(data: LogUpdateManyMutationInput!, where: LogWhereInput): BatchPayload!
  upsertLog(where: LogWhereUniqueInput!, create: LogCreateInput!, update: LogUpdateInput!): Log!
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteManyLogs(where: LogWhereInput): BatchPayload!
  createSet(data: SetCreateInput!): Set!
  updateSet(data: SetUpdateInput!, where: SetWhereUniqueInput!): Set
  updateManySets(data: SetUpdateManyMutationInput!, where: SetWhereInput): BatchPayload!
  upsertSet(where: SetWhereUniqueInput!, create: SetCreateInput!, update: SetUpdateInput!): Set!
  deleteSet(where: SetWhereUniqueInput!): Set
  deleteManySets(where: SetWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  excersises(where: ExcersisesWhereUniqueInput!): Excersises
  excersiseses(where: ExcersisesWhereInput, orderBy: ExcersisesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Excersises]!
  excersisesesConnection(where: ExcersisesWhereInput, orderBy: ExcersisesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExcersisesConnection!
  log(where: LogWhereUniqueInput!): Log
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log]!
  logsConnection(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogConnection!
  set(where: SetWhereUniqueInput!): Set
  sets(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Set]!
  setsConnection(where: SetWhereInput, orderBy: SetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SetConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Set {
  id: ID!
  weight: Int!
  reps: Int!
}

type SetConnection {
  pageInfo: PageInfo!
  edges: [SetEdge]!
  aggregate: AggregateSet!
}

input SetCreateInput {
  id: ID
  weight: Int!
  reps: Int!
}

input SetCreateManyInput {
  create: [SetCreateInput!]
  connect: [SetWhereUniqueInput!]
}

type SetEdge {
  node: Set!
  cursor: String!
}

enum SetOrderByInput {
  id_ASC
  id_DESC
  weight_ASC
  weight_DESC
  reps_ASC
  reps_DESC
}

type SetPreviousValues {
  id: ID!
  weight: Int!
  reps: Int!
}

input SetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  reps: Int
  reps_not: Int
  reps_in: [Int!]
  reps_not_in: [Int!]
  reps_lt: Int
  reps_lte: Int
  reps_gt: Int
  reps_gte: Int
  AND: [SetScalarWhereInput!]
  OR: [SetScalarWhereInput!]
  NOT: [SetScalarWhereInput!]
}

type SetSubscriptionPayload {
  mutation: MutationType!
  node: Set
  updatedFields: [String!]
  previousValues: SetPreviousValues
}

input SetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SetWhereInput
  AND: [SetSubscriptionWhereInput!]
  OR: [SetSubscriptionWhereInput!]
  NOT: [SetSubscriptionWhereInput!]
}

input SetUpdateDataInput {
  weight: Int
  reps: Int
}

input SetUpdateInput {
  weight: Int
  reps: Int
}

input SetUpdateManyDataInput {
  weight: Int
  reps: Int
}

input SetUpdateManyInput {
  create: [SetCreateInput!]
  update: [SetUpdateWithWhereUniqueNestedInput!]
  upsert: [SetUpsertWithWhereUniqueNestedInput!]
  delete: [SetWhereUniqueInput!]
  connect: [SetWhereUniqueInput!]
  set: [SetWhereUniqueInput!]
  disconnect: [SetWhereUniqueInput!]
  deleteMany: [SetScalarWhereInput!]
  updateMany: [SetUpdateManyWithWhereNestedInput!]
}

input SetUpdateManyMutationInput {
  weight: Int
  reps: Int
}

input SetUpdateManyWithWhereNestedInput {
  where: SetScalarWhereInput!
  data: SetUpdateManyDataInput!
}

input SetUpdateWithWhereUniqueNestedInput {
  where: SetWhereUniqueInput!
  data: SetUpdateDataInput!
}

input SetUpsertWithWhereUniqueNestedInput {
  where: SetWhereUniqueInput!
  update: SetUpdateDataInput!
  create: SetCreateInput!
}

input SetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  reps: Int
  reps_not: Int
  reps_in: [Int!]
  reps_not_in: [Int!]
  reps_lt: Int
  reps_lte: Int
  reps_gt: Int
  reps_gte: Int
  AND: [SetWhereInput!]
  OR: [SetWhereInput!]
  NOT: [SetWhereInput!]
}

input SetWhereUniqueInput {
  id: ID
}

type Subscription {
  excersises(where: ExcersisesSubscriptionWhereInput): ExcersisesSubscriptionPayload
  log(where: LogSubscriptionWhereInput): LogSubscriptionPayload
  set(where: SetSubscriptionWhereInput): SetSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  logs: LogCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  logs: LogUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  logs_every: LogWhereInput
  logs_some: LogWhereInput
  logs_none: LogWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
